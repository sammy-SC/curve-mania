
<html>
<head>
  <title>Example minimum receiver</title>
  <script src="//www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js"></script>
  <script src="//www.gstatic.com/cast/sdk/libs/games/1.0.0/cast_games_receiver.js"></script>
  <style>
  * { margin:0; padding:0; } /* to remove the top and left whitespace */

html, body { width:100%; height:100%; } /* just to be sure these are full screen*/

canvas { display:block; }

  </style>
</head>
<body>
    <canvas id="myCanvas" width="480" height="320"></canvas>
<script src='helpers.js'></script>
<script src='game.js'></script>
<script src='player.js'></script>

<script>
const canvas = document.getElementById("myCanvas")
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const ctx = canvas.getContext("2d")


const GAME_SPEED = 5

//snake shit
const COLORS = ["red", "black", "orange", "blue"]
const SNAKE_WIDTH = 3
const MOVEMENT_SPEED = 1.0
const STEERING_SPEED = 0.01
const JUMP_PROBABILITY = 0.001
const JUMPING_BOTTOM_LIMIT = 100
const JUMPING_TOP_LIMIT = 300

//keyboard
const LEFT_KEY_CODE = 37
const RIGHT_KEY_CODE = 39

var player1 = new Player(getRandom(0, canvas.width), getRandom(0, canvas.height), getRandomColor(), 'Sammy')

function keyDownHandler (e) {
    if(e.keyCode == RIGHT_KEY_CODE) {
        player1.right = true
    } else if(e.keyCode == LEFT_KEY_CODE) {
        player1.left = true
    }
}

function keyUpHandler(e) {
    if(e.keyCode == RIGHT_KEY_CODE) {
        player1.right = false
    } else if(e.keyCode == LEFT_KEY_CODE) {
        player1.left = false
    }
}

document.addEventListener("keydown", keyDownHandler, false)
document.addEventListener("keyup", keyUpHandler, false)

var gameLoop = null
var gamePlayers = {}
var gameHasStarted = false

function clearCanvas() {
    ctx.clearRect(0, 0, canvas.width, canvas.height)
}

function draw() {
    var keys = Object.keys(gamePlayers)
    var isSomebodyAlive = false
    keys.forEach(function(key) {
        var player = gamePlayers[key]
        player.draw()
        isSomebodyAlive = !player.dead
    })

    if (!isSomebodyAlive) {
        clearInterval(gameLoop)
        clearCanvas()
        gameManager.updateGameplayState(cast.receiver.games.GameplayState.PAUSED, true);
        gamePlayers = {}
        gameHasStarted = false
        ctx.font = "48px serif"
        ctx.fillText("GAME OVER", 10, 50);
    }
}

function start() {
    gameManager.addEventListener(
        cast.receiver.games.EventType.GAME_MESSAGE_RECEIVED,
        function(event) {
            var isStart = event.requestExtraMessageData.action
            if (isStart === 'start' && !gameHasStarted) {
                clearCanvas()
                gameHasStarted = true
                var players = gameManager.getPlayers()
                console.log(players)

                for (var i = 0; i < players.length; i++) {
                    console.log(i)
                    var player = players[i]
                    gamePlayers[player.playerId] = new Player(getRandom(0, canvas.width), getRandom(0, canvas.height), COLORS[i], player.playerId);
                    gameManager.sendGameMessageToPlayer(player.playerId, "GAME LAUNCHED");
                    console.log('sending message to ' + player.playerId)
                }
                gameManager.updateGameplayState(cast.receiver.games.GameplayState.RUNNING);
                gameLoop = setInterval(draw, GAME_SPEED)
                console.log('STARTING')
                return
            } else if (gameHasStarted) {
                console.log(gamePlayers)
                var playerId = event.playerInfo.playerId
                var playerClass = gamePlayers[playerId]
                var direction = event.requestExtraMessageData.direction
                var pressed = event.requestExtraMessageData.pressed
                console.log(direction + ' ' + pressed)

                if (playerClass === undefined) {
                    console.log ("UNDEFINED PLAYER")
                    return
                }

                if (direction === 'left') {
                    playerClass.left = (pressed === 'true')
                }

                if (direction == 'right') {
                    playerClass.right = (pressed === 'true')
                }
            }
        }
    )
}

/**
 * Main entry point. This is not meant to be compiled so suppressing missing
 * goog.require checks.
 */
var initialize = function() {
  var castReceiverManager = cast.receiver.CastReceiverManager.getInstance();
  var appConfig = new cast.receiver.CastReceiverManager.Config();

  appConfig.statusText = 'Curve Mania';
  // In production, use the default maxInactivity instead of using this.
  appConfig.maxInactivity = 6000;

  // Create the game before starting castReceiverManager to make sure any extra
  // cast namespaces can be set up.
  /** @suppress {missingRequire} */
  var gameConfig = new cast.receiver.games.GameManagerConfig();
  gameConfig.applicationName = 'Curve Mania';
  gameConfig.maxPlayer = 4
  /** @suppress {missingRequire} */
  gameManager = new cast.receiver.games.GameManager(gameConfig);

  var startGame = function() {
      start()
  };

  castReceiverManager.onReady = function(event) {
    if (document.readyState === 'complete') {
      console.log('Starting game.');
      gameManager.updateGameplayState(cast.receiver.games.GameplayState.LOADING);
      startGame();
    } else {
      window.onload = startGame;
    }
  };
  castReceiverManager.start(appConfig);
};

if (document.readyState === 'complete') {
  initialize();
} else {
  /** Main entry point. */
  window.onload = initialize;
}
</script>
</body>
</html>
