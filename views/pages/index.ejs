
<html>
<head>
  <title>Example minimum receiver</title>
  <script src="//www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js"></script>
  <script src="//www.gstatic.com/cast/sdk/libs/games/1.0.0/cast_games_receiver.js"></script>
</head>
<body>
	<div class="app">
		<div class="container">
            <canvas id="myCanvas" width="480" height="320"></canvas>
		</div>
	</div>
<script src='helpers.js'></script>
<script src='game.js'></script>
<script src='player.js'></script>

<script>
const canvas = document.getElementById("myCanvas")
const ctx = canvas.getContext("2d")


const GAME_SPEED = 5

//snake shit
const COLORS = ["red", "black", "orange", "blue"]
const SNAKE_WIDTH = 3
const MOVEMENT_SPEED = 0.5
const STEERING_SPEED = 0.01
const JUMP_PROBABILITY = 0.001
const JUMPING_BOTTOM_LIMIT = 100
const JUMPING_TOP_LIMIT = 300

//keyboard
const LEFT_KEY_CODE = 37
const RIGHT_KEY_CODE = 39

var player1 = new Player(getRandom(0, canvas.width), getRandom(0, canvas.height), getRandomColor(), 'Sammy')

function keyDownHandler (e) {
    if(e.keyCode == RIGHT_KEY_CODE) {
        player1.right = true
    } else if(e.keyCode == LEFT_KEY_CODE) {
        player1.left = true
    }
}

function keyUpHandler(e) {
    if(e.keyCode == RIGHT_KEY_CODE) {
        player1.right = false
    } else if(e.keyCode == LEFT_KEY_CODE) {
        player1.left = false
    }
}

document.addEventListener("keydown", keyDownHandler, false)
document.addEventListener("keyup", keyUpHandler, false)

function draw() {
    player1.draw()
}

var gameLoop = null

function start() {
    var debugUi = new cast.receiver.games.debug.DebugUI(gameManager);
    debugUi.open()

    gameManager.addEventListener(
        cast.receiver.games.PlayerState.AVAILABLE,
        function(event) {
            gameLoop = setInterval(draw, GAME_SPEED)
            console.log('===================')
            console.log(event)
            console.log('===================')
        }
    )

    gameManager.addEventListener(
        cast.receiver.games.PlayerState.DROPPED,
        function(event) {
            clearInterval(gameLoop)
            console.log('===================')
            console.log(event)
            console.log('===================')
        }
    )

    gameManager.addEventListener(
        cast.receiver.games.PlayerState.READY,
        function(event) {
            console.log('===================')
            console.log(event)
            console.log('===================')
        }
    )

    gameManager.addEventListener(
        cast.receiver.games.EventType.GAME_MESSAGE_RECEIVED,
        function(event) {
            console.log('===================')
            console.log(event)
            console.log('===================')
        }
    )
}

/**
 * Main entry point. This is not meant to be compiled so suppressing missing
 * goog.require checks.
 */
var initialize = function() {
  var castReceiverManager = cast.receiver.CastReceiverManager.getInstance();
  var appConfig = new cast.receiver.CastReceiverManager.Config();

  appConfig.statusText = 'Starcast';
  // In production, use the default maxInactivity instead of using this.
  appConfig.maxInactivity = 6000;

  // Create the game before starting castReceiverManager to make sure any extra
  // cast namespaces can be set up.
  /** @suppress {missingRequire} */
  var gameConfig = new cast.receiver.games.GameManagerConfig();
  gameConfig.applicationName = 'Starcast';
  /** @suppress {missingRequire} */
  gameManager = new cast.receiver.games.GameManager(gameConfig);

  var startGame = function() {
      console.log('Game running.');
      start()
      gameManager.updateGameStatusText('Game running.');
  };

  castReceiverManager.onReady = function(event) {
    if (document.readyState === 'complete') {
      console.log('Starting game.');
      startGame();
    } else {
      window.onload = startGame;
    }
  };
  castReceiverManager.start(appConfig);
};

if (document.readyState === 'complete') {
  initialize();
} else {
  /** Main entry point. */
  window.onload = initialize;
}

</script>
</body>
</html>
